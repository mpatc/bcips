<pre>
  BCIP: 123
  Layer: Process
  Title: BCIP Classification
  Author: Eric Lombrozo <elombrozo@gmail.com>
  Status: Draft
  Type: Process
  Created: 2015-08-26
</pre>

==Abstract==

This document describes a classification scheme for BCIPs.

BCIPs are classified by system layers with lower numbered layers involving more intricate interoperability requirements.

The specification defines the layers and sets forth specific criteria for deciding to which layer a particular standards BCIP belongs.

==Motivation==

Bitcoin is a system involving a number of different standards. Some standards are absolute requirements for interoperability while others can be considered optional, giving implementors a choice of whether to support them.

In order to have a BCIP process which more closely reflects the interoperability requirements, it is necessary to categorize BCIPs accordingly. Lower layers present considerably greater challenges in getting standards accepted and deployed.

==Specification==

Standards BCIPs are placed in one of four layers:

# Consensus
# Peer Services
# API/RPC
# Applications

===1. Consensus Layer===

The consensus layer defines cryptographic commitment structures. Its purpose is ensuring that anyone can locally evaluate whether a particular state and history is valid, providing settlement guarantees, and assuring eventual convergence.

The consensus layer is not concerned with how messages are propagated on a network.

Disagreements over the consensus layer can result in network partitioning, or forks, where different nodes might end up accepting different incompatible histories. We further subdivide consensus layer changes into soft forks and hard forks.

====Soft Forks====

In a soft fork, some structures that were valid under the old rules are no longer valid under the new rules. Structures that were invalid under the old rules continue to be invalid under the new rules.

====Hard Forks====

In a hard fork, structures that were invalid under the old rules become valid under the new rules.

===2. Peer Services Layer===

The peer services layer specifies how nodes find each other and propagate messages.

Only a subset of all specified peer services are required for basic node interoperability. Nodes can support further optional extensions.

It is always possible to add new services without breaking compatibility with existing services, then gradually deprecate older services. In this manner, the entire network can be upgraded without serious risks of service disruption.

===3. API/RPC Layer===

The API/RPC layer specifies higher level calls accessible to applications. Support for these BCIPs is not required for basic network interoperability but might be expected by some client applications.

There's room at this layer to allow for competing standards without breaking basic network interoperability.

===4. Applications Layer===

The applications layer specifies high level structures, abstractions, and conventions that allow different applications to support similar features and share data.

==Classification of existing BCIPs==

{| class="wikitable sortable" style="width: auto; text-align: center; font-size: smaller; table-layout: fixed;"
!Number
!Layer
!Title
!Owner
!Type
!Status
|- style="background-color: #cfffcf"
| [[bcip-0001.mediawiki|1]]
| BCIP Purpose and Guidelines
| Amir Taaki
| Process
| Active
|-
| [[bcip-0009.mediawiki|9]]
| Version bits with timeout and delay
| Pieter Wuille, Peter Todd, Greg Maxwell, Rusty Russell
| Informational
| Draft
|- style="background-color: #ffcfcf"
| [[bcip-0011.mediawiki|11]]
| M-of-N Standard Transactions
| Gavin Andresen
| Standard
| Final
|- style="background-color: #cfffcf"
| [[bcip-0013.mediawiki|13]]
| Address Format for pay-to-script-hash
| Gavin Andresen
| Standard
| Final
|- style="background-color: #ffcfcf"
| [[bcip-0014.mediawiki|14]]
| Protocol Version and User Agent
| Amir Taaki, Patrick Strateman
| Standard
| Final
|- style="background-color: #cfffcf"
| [[bcip-0016.mediawiki|16]]
| Pay to Script Hash
| Gavin Andresen
| Standard
| Final
|- style="background-color: #ffcfcf"
| [[bcip-0021.mediawiki|21]]
| URI Scheme
| Nils Schneider, Matt Corallo
| Standard
| Final
|- style="background-color: #cfffcf"
| [[bcip-0022.mediawiki|22]]
| getblocktemplate - Fundamentals
| Luke Dashjr
| Standard
| Final
|- style="background-color: #cfffcf"
| [[bcip-0023.mediawiki|23]]
| getblocktemplate - Pooled Mining
| Luke Dashjr
| Standard
| Final
|- style="background-color: #cfffcf"
| [[bcip-0030.mediawiki|30]]
| Duplicate transactions
| Pieter Wuille
| Standard
| Final
|- style="background-color: #cfffcf"
| [[bcip-0031.mediawiki|31]]
| Pong message
| Mike Hearn
| Standard
| Final
|- style="background-color: #cfffcf"
| [[bcip-0032.mediawiki|32]]
| Hierarchical Deterministic Wallets
| Pieter Wuille
| Informational
| Final
|-
| [[bcip-0034.mediawiki|34]]
| Block v2, Height in Coinbase
| Gavin Andresen
| Standard
| Final
|- style="background-color: #cfffcf"
| [[bcip-0035.mediawiki|35]]
| mempool message
| Jeff Garzik
| Standard
| Final
|-
| [[bcip-0037.mediawiki|37]]
| Connection Bloom filtering
| Mike Hearn, Matt Corallo
| Standard
| Final
|-
| [[bcip-0038.mediawiki|38]]
| Passphrase-protected private key
| Mike Caldwell, Aaron Voisine
| Standard
| Draft
|-
| [[bcip-0039.mediawiki|39]]
| Mnemonic code for generating deterministic keys
| Marek Palatinus, Pavol Rusnak, Aaron Voisine, Sean Bowe
| Standard
| Draft
|-
| [[bcip-0044.mediawiki|44]]
| Multi-Account Hierarchy for Deterministic Wallets
| Marek Palatinus, Pavol Rusnak
| Standard
| Draft
|-
| [[bcip-0045.mediawiki|45]]
| Structure for Deterministic P2SH Multisignature Wallets
| Manuel Araoz, Ryan X. Charles, Matias Alejo Garcia
| Standard
| Draft
|-
| [[bcip-0047.mediawiki|47]]
| Reusable Payment Codes for Hierarchical Deterministic Wallets
| Justus Ranvier
| Informational
| Draft
|- style="background-color: #cfffcf"
| [[bcip-0050.mediawiki|50]]
| March 2013 Chain Fork Post-Mortem
| Gavin Andresen
| Informational
| Final
<!-- 50 series reserved for a group of post-mortems -->
|-
| [[bcip-0060.mediawiki|60]]
| Fixed Length "version" Message (Relay-Transactions Field)
| Amir Taaki
| Standard
| Draft
|- style="background-color: #cfffcf"
| [[bcip-0061.mediawiki|61]]
| Reject P2P message
| Gavin Andresen
| Standard
| Final
|- style="background-color: #ffcfcf"
| [[bcip-0065.mediawiki|65]]
| OP_CHECKLOCKTIMEVERIFY
| Peter Todd
| Standard
| Final
|- style="background-color: #cfffcf"
| [[bcip-0066.mediawiki|66]]
| Strict DER signatures
| Pieter Wuille
| Standard
| Final
|-
| [[bcip-0067.mediawiki|67]]
| Deterministic Pay-to-script-hash multi-signature addresses through public key sorting
| Thomas Kerin, Jean-Pierre Rupp, Ruben de Vries
| Standard
| Draft
|-
| [[bcip-0069.mediawiki|69]]
| Lexicographical Indexing of Transaction Inputs and Outputs
| Kristov Atlas
| Informational
| Draft
|- style="background-color: #cfffcf"
| [[bcip-0070.mediawiki|70]]
| Payment Protocol
| Gavin Andresen, Mike Hearn
| Standard
| Final
|- style="background-color: #cfffcf"
| [[bcip-0071.mediawiki|71]]
| Payment Protocol MIME types
| Gavin Andresen
| Standard
| Final
|- style="background-color: #cfffcf"
| [[bcip-0072.mediawiki|72]]
| bitcoin: uri extensions for Payment Protocol
| Gavin Andresen
| Standard
| Final
|- style="background-color: #cfffcf"
| [[bcip-0073.mediawiki|73]]
| Use "Accept" header for response type negotiation with Payment Request URLs
| Stephen Pair
| Standard
| Final
|-
| [[bcip-0080.mediawiki|80]]
| Hierarchy for Non-Colored Voting Pool Deterministic Multisig Wallets
| Justus Ranvier, Jimmy Song
| Informational
| Draft
|-
| [[bcip-0081.mediawiki|81]]
| Hierarchy for Colored Voting Pool Deterministic Multisig Wallets
| Justus Ranvier, Jimmy Song
| Informational
| Draft
|-
| [[bcip-0083.mediawiki|83]]
| Dynamic Hierarchical Deterministic Key Trees
| Eric Lombrozo
| Standard
| Draft
|-
| [[bcip-0099.mediawiki|99]]
| Motivation and deployment of consensus rule changes ([soft/hard]forks)
| Jorge Tim√≥n
| Informational
| Draft
|- style="background-color: #ffcfcf"
| [[bcip-0105.mediawiki|105]]
| Consensus based block size retargeting algorithm
| BtcDrak, mpatc
| Standard
| Draft
|-
| [[bcip-0106.mediawiki|106]]
| Dynamically Controlled Bitcoin Block Size Max Cap
| Upal Chakraborty
| Standard
| Draft
|-
| [[bcip-0107.mediawiki|107]]
| Dynamic limit on the block size
| Washington Y. Sanchez
| Standard
| Draft
|-
| [[bcip-0111.mediawiki|111]]
| NODE_BLOOM service bit
| Matt Corallo, Peter Todd
| Standard
| Draft
|-
| [[bcip-0112.mediawiki|112]]
| CHECKSEQUENCEVERIFY
| BtcDrak, Mark Friedenbach, Eric Lombrozo
| Standard
| Draft
|-
| [[bcip-0113.mediawiki|113]]
| Median time-past as endpoint for lock-time calculations
| Thomas Kerin, Mark Friedenbach
| Standard
| Draft
|-
| [[bcip-0114.mediawiki|114]]
| Merkelized Abstract Syntax Tree
| Johnson Lau
| Standard
| Draft
|-
| [[bcip-0120.mediawiki|120]]
| Proof of Payment
| Kalle Rosenbaum
| Standard
| Draft
|-
| [[bcip-0121.mediawiki|121]]
| Proof of Payment URI scheme
| Kalle Rosenbaum
| Standard
| Draft
|-
| [[bcip-0122.mediawiki|122]]
| URI scheme for Blockchain references / exploration
| Marco Pontello
| Standard
| Draft
|-
| [[bcip-0123.mediawiki|123]]
| BCIP Classification
| Eric Lombrozo
| Process
| Draft
|-
| [[bcip-0124.mediawiki|124]]
| Hierarchical Deterministic Script Templates
| Eric Lombrozo, William Swanson
| Informational
| Draft
|-
| [[bcip-0130.mediawiki|130]]
| sendheaders message
| Suhas Daftuar
| Standard
| Draft
|-
| [[bcip-0131.mediawiki|131]]
| "Coalescing Transaction" Specification (wildcard inputs)
| Chris Priest
| Standard
| Draft
|-
| [[bcip-0132.mediawiki|132]]
| Committee-based BCIP Acceptance Process
| Andy Chase
| Process
| Draft
|-
| [[bcip-0133.mediawiki|133]]
| feefilter message
| Alex Morcos
| Standard
| Draft
|-
| [[bcip-0140.mediawiki|140]]
| Normalized TXID
| Christian Decker
| Standard
| Draft
|-
| [[bcip-0143.mediawiki|143]]
| Transaction Signature Verification for Version 0 Witness Program
| Johnson Lau, Pieter Wuille
| Standard
| Draft
|-
| [[bcip-0151.mediawiki|151]]
| Peer-to-Peer Communication Encryption
| Jonas Schnelli
| Standard
| Draft
|-
| [[bcip-0152.mediawiki|152]]
| Compact Block Relay
| Matt Corallo
| Standard
| Draft
|}
